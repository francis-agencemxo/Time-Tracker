{"version":3,"file":"extension.js","sourceRoot":"","sources":["../src/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import * as vscode from \"vscode\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\nimport { DatabaseManager } from \"./database\";\nimport { SessionTracker } from \"./sessionTracker\";\nimport { GitCommitTracker } from \"./gitTracker\";\nimport { LicenseStore } from \"./licenseStore\";\nimport { TrackerServer } from \"./server\";\nimport {\n  readConfiguration,\n  onConfigurationChange,\n  TrackerConfiguration,\n} from \"./config\";\n\nlet sessionTracker: SessionTracker | null = null;\nlet gitTracker: GitCommitTracker | null = null;\nlet trackerServer: TrackerServer | null = null;\nlet database: DatabaseManager | null = null;\nlet licenseStore: LicenseStore | null = null;\nlet currentConfig: TrackerConfiguration | null = null;\nlet serverStaticRoot: string | null = null;\nlet configWatcher: vscode.Disposable | null = null;\n\nexport async function activate(context: vscode.ExtensionContext): Promise<void> {\n  currentConfig = readConfiguration();\n  try {\n    database = new DatabaseManager();\n    if (database.backend === \"json\") {\n      console.warn(\"CodePulse: running against JSON datastore. Run 'npm run rebuild-native' inside src/main/vscode to build better-sqlite3 for VS Code.\");\n      vscode.window.showWarningMessage(\"CodePulse Time Tracker is using the JSON datastore. Rebuild native dependencies (npm run rebuild-native) to share data with PhpStorm.\");\n    }\n    licenseStore = new LicenseStore();\n    sessionTracker = new SessionTracker(database, currentConfig);\n    gitTracker = new GitCommitTracker(database, currentConfig);\n\n    const candidateRoots = [\n      path.join(context.extensionPath, \"dist\", \"public\"),\n      path.join(context.extensionPath, \"public\"),\n      path.join(context.extensionPath, \"..\", \"resources\", \"public\"),\n    ];\n    serverStaticRoot = candidateRoots.find((candidate) => fs.existsSync(candidate)) ?? candidateRoots[0];\n    trackerServer = new TrackerServer(database, licenseStore, currentConfig);\n\n    sessionTracker.activate();\n    gitTracker.activate();\n\n    if (currentConfig.autoStartServer) {\n      await safeStartServer(currentConfig.trackerServerPort);\n    }\n  } catch (error) {\n    console.error(\"CodePulse: failed to initialise background services\", error);\n    vscode.window.showErrorMessage(\"CodePulse Time Tracker failed to start its background services. Dashboard commands remain available; check the extension host logs for details.\");\n    await deactivate();\n  }\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(\"codepulseTimeTracker.openDashboard\", async () => {\n      const url = currentConfig?.dashboardUrl ?? `http://localhost:${currentConfig?.trackerServerPort ?? 56000}`;\n      await vscode.env.openExternal(vscode.Uri.parse(url));\n    }),\n    vscode.commands.registerCommand(\"codepulseTimeTracker.restartServer\", async () => {\n      if (!trackerServer || !currentConfig) {\n        vscode.window.showWarningMessage(\"CodePulse server is not initialised yet.\");\n        return;\n      }\n      await safeRestartServer(currentConfig.trackerServerPort);\n      vscode.window.showInformationMessage(\"CodePulse tracker server restarted.\");\n    }),\n  );\n\n  configWatcher = onConfigurationChange(async (config) => {\n    currentConfig = config;\n    sessionTracker?.updateConfiguration(config);\n    gitTracker?.updateConfiguration(config);\n    trackerServer?.updateConfiguration(config);\n\n    if (config.autoStartServer) {\n      await safeRestartServer(config.trackerServerPort);\n    } else {\n      await trackerServer?.stop();\n    }\n  });\n\n  context.subscriptions.push({ dispose: deactivate });\n}\n\nexport async function deactivate(): Promise<void> {\n  configWatcher?.dispose();\n  configWatcher = null;\n  await trackerServer?.stop();\n  trackerServer = null;\n  sessionTracker?.dispose();\n  sessionTracker = null;\n  gitTracker?.dispose();\n  gitTracker = null;\n  database = null;\n  licenseStore = null;\n}\n\nasync function safeStartServer(port: number): Promise<void> {\n  if (!trackerServer || !serverStaticRoot) {\n    return;\n  }\n  try {\n    await trackerServer.start(port, serverStaticRoot);\n  } catch (error) {\n    console.error(\"CodePulse: failed to start tracker server\", error);\n    vscode.window.showErrorMessage(`CodePulse tracker server failed to start on port ${port}: ${error}`);\n  }\n}\n\nasync function safeRestartServer(port: number): Promise<void> {\n  if (!trackerServer || !serverStaticRoot) {\n    return;\n  }\n  try {\n    await trackerServer.restart(port, serverStaticRoot);\n  } catch (error) {\n    console.error(\"CodePulse: failed to restart tracker server\", error);\n    vscode.window.showErrorMessage(`CodePulse tracker server failed to restart on port ${port}: ${error}`);\n  }\n}\n"]}