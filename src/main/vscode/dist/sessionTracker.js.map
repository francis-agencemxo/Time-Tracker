{"version":3,"file":"sessionTracker.js","sourceRoot":"","sources":["../src/sessionTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import * as vscode from \"vscode\";\nimport { DatabaseManager } from \"./database\";\nimport { TrackerConfiguration } from \"./config\";\nimport { deriveProjectNameFromUri } from \"./projectNames\";\n\ninterface ActivityContext {\n  filePath?: string | null;\n  projectName?: string | null;\n}\n\nexport class SessionTracker implements vscode.Disposable {\n  private disposables: vscode.Disposable[] = [];\n  private intervalHandle: NodeJS.Timeout | null = null;\n  private lastActivity = Date.now();\n  private context: ActivityContext = {};\n  private config: TrackerConfiguration;\n\n  constructor(\n    private readonly database: DatabaseManager,\n    config: TrackerConfiguration,\n  ) {\n    this.config = config;\n  }\n\n  activate(): void {\n    this.trackActiveEditor(vscode.window.activeTextEditor);\n    this.registerListeners();\n    this.restartInterval();\n  }\n\n  dispose(): void {\n    for (const disposable of this.disposables) {\n      disposable.dispose();\n    }\n    this.disposables = [];\n    if (this.intervalHandle) {\n      clearInterval(this.intervalHandle);\n      this.intervalHandle = null;\n    }\n  }\n\n  updateConfiguration(config: TrackerConfiguration): void {\n    this.config = config;\n    this.restartInterval();\n  }\n\n  private registerListeners(): void {\n    this.disposables.push(\n      vscode.window.onDidChangeActiveTextEditor((editor) => {\n        this.trackActiveEditor(editor);\n      }),\n      vscode.window.onDidChangeWindowState((state) => {\n        if (state.focused) {\n          this.bumpActivity();\n        }\n      }),\n      vscode.workspace.onDidChangeTextDocument((event) => {\n        if (event.document === vscode.window.activeTextEditor?.document) {\n          this.bumpActivity();\n        }\n      }),\n      vscode.workspace.onDidSaveTextDocument((document) => {\n        this.bumpActivity();\n        this.recordFileSave(document);\n      }),\n      vscode.workspace.onDidOpenTextDocument(() => this.bumpActivity()),\n      vscode.workspace.onDidCloseTextDocument(() => this.bumpActivity()),\n    );\n  }\n\n  private restartInterval(): void {\n    if (this.intervalHandle) {\n      clearInterval(this.intervalHandle);\n    }\n    const intervalMillis =\n      Math.max(this.config.activitySamplingIntervalSeconds, 15) * 1000;\n    this.intervalHandle = setInterval(() => this.recordCodingInterval(), intervalMillis);\n  }\n\n  private bumpActivity(): void {\n    this.lastActivity = Date.now();\n  }\n\n  private isIdle(): boolean {\n    const idleThresholdMs = Math.max(this.config.idleTimeoutMinutes, 1) * 60 * 1000;\n    return Date.now() - this.lastActivity > idleThresholdMs;\n  }\n\n  private trackActiveEditor(editor: vscode.TextEditor | undefined): void {\n    if (!editor) {\n      this.context = {};\n      return;\n    }\n\n    const document = editor.document;\n    if (document.isUntitled) {\n      this.context = {};\n      return;\n    }\n\n    const projectName = this.resolveProjectName(document.uri);\n    const relativePath = vscode.workspace.asRelativePath(document.uri, false);\n    this.context = {\n      projectName,\n      filePath: relativePath,\n    };\n    this.bumpActivity();\n  }\n\n  private resolveProjectName(resource: vscode.Uri): string | null {\n    return deriveProjectNameFromUri(resource, this.config);\n  }\n\n  private recordCodingInterval(): void {\n    if (this.isIdle()) {\n      return;\n    }\n\n    const projectName = this.context.projectName;\n    if (!projectName) {\n      return;\n    }\n\n    const seconds = Math.max(this.config.activitySamplingIntervalSeconds, 15);\n    const end = new Date();\n    const start = new Date(end.getTime() - seconds * 1000);\n\n    this.database.insertSession({\n      project: projectName,\n      startIso: start.toISOString(),\n      endIso: end.toISOString(),\n      type: \"coding\",\n      file: this.context.filePath ?? null,\n    });\n  }\n\n  private recordFileSave(document: vscode.TextDocument): void {\n    const projectName = this.resolveProjectName(document.uri);\n    if (!projectName) {\n      return;\n    }\n    const relativePath = vscode.workspace.asRelativePath(document.uri, false);\n    const now = new Date();\n    const start = new Date(now.getTime() - 10 * 1000);\n\n    this.database.insertSession({\n      project: projectName,\n      startIso: start.toISOString(),\n      endIso: now.toISOString(),\n      type: \"coding\",\n      file: relativePath,\n    });\n  }\n}\n"]}