{"version":3,"file":"databaseSqlite.js","sourceRoot":"","sources":["../src/databaseSqlite.ts"],"names":[],"mappings":"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","sourcesContent":["import Database from \"better-sqlite3\";\nimport * as fs from \"fs\";\nimport * as os from \"os\";\nimport * as path from \"path\";\nimport {\n  ActiveProject,\n  CommitRecord,\n  IgnoredProject,\n  MeetingPattern,\n  ProjectAlias,\n  ProjectClient,\n  SessionRecord,\n  UrlMapping,\n  WrikeMapping,\n} from \"./databaseTypes\";\n\nfunction ensureDir(filePath: string): void {\n  const dir = path.dirname(filePath);\n  if (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir, { recursive: true });\n  }\n}\n\nexport class SqliteDatabaseManager {\n  private db: Database.Database;\n\n  constructor(\n    private readonly dbPath: string = path.join(\n      os.homedir(),\n      \".cache\",\n      \"phpstorm-time-tracker\",\n      \"data.db\",\n    ),\n  ) {\n    ensureDir(this.dbPath);\n    this.db = new Database(this.dbPath);\n    this.initialize();\n    console.log(`CodePulse: using SQLite datastore at ${this.dbPath}`);\n  }\n\n  private initialize(): void {\n    this.db.exec(`\n      PRAGMA journal_mode = WAL;\n      CREATE TABLE IF NOT EXISTS sessions (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        project TEXT NOT NULL,\n        date TEXT NOT NULL,\n        start TEXT NOT NULL,\n        end TEXT NOT NULL,\n        type TEXT NOT NULL,\n        file TEXT,\n        host TEXT,\n        url TEXT\n      );\n\n      CREATE TABLE IF NOT EXISTS urls (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        project TEXT NOT NULL,\n        url TEXT\n      );\n\n      CREATE TABLE IF NOT EXISTS ignored_projects (\n        id INTEGER PRIMARY KEY,\n        project_name TEXT NOT NULL UNIQUE,\n        ignored_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n\n      CREATE INDEX IF NOT EXISTS idx_ignored_projects_project_name ON ignored_projects(project_name);\n      CREATE INDEX IF NOT EXISTS idx_ignored_projects_ignored_at ON ignored_projects(ignored_at);\n\n      CREATE TABLE IF NOT EXISTS project_names (\n        id INTEGER PRIMARY KEY,\n        project_name TEXT NOT NULL UNIQUE,\n        custom_name TEXT,\n        logo_url TEXT\n      );\n\n      CREATE TABLE IF NOT EXISTS wrike_mappings (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        project_name TEXT NOT NULL UNIQUE,\n        wrike_project_id TEXT NOT NULL,\n        wrike_title TEXT NOT NULL,\n        wrike_permalink TEXT NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n\n      CREATE INDEX IF NOT EXISTS idx_wrike_mappings_project ON wrike_mappings(project_name);\n\n      CREATE TABLE IF NOT EXISTS project_clients (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        project_name TEXT NOT NULL UNIQUE,\n        client_name TEXT NOT NULL,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n\n      CREATE INDEX IF NOT EXISTS idx_project_clients_project ON project_clients(project_name);\n      CREATE INDEX IF NOT EXISTS idx_project_clients_client ON project_clients(client_name);\n\n      CREATE TABLE IF NOT EXISTS commits (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        project TEXT NOT NULL,\n        commit_hash TEXT NOT NULL,\n        commit_message TEXT NOT NULL,\n        branch TEXT,\n        author_name TEXT,\n        author_email TEXT,\n        commit_time TEXT NOT NULL,\n        files_changed INTEGER DEFAULT 0,\n        lines_added INTEGER DEFAULT 0,\n        lines_deleted INTEGER DEFAULT 0,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n\n      CREATE INDEX IF NOT EXISTS idx_commits_project ON commits(project);\n      CREATE INDEX IF NOT EXISTS idx_commits_hash ON commits(commit_hash);\n      CREATE INDEX IF NOT EXISTS idx_commits_time ON commits(commit_time);\n\n      CREATE TABLE IF NOT EXISTS meeting_patterns (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        project_name TEXT NOT NULL,\n        url_pattern TEXT NOT NULL UNIQUE,\n        meeting_title TEXT,\n        description TEXT,\n        auto_assign INTEGER DEFAULT 1,\n        last_used DATETIME DEFAULT CURRENT_TIMESTAMP,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      );\n\n      CREATE INDEX IF NOT EXISTS idx_meeting_patterns_project ON meeting_patterns(project_name);\n      CREATE INDEX IF NOT EXISTS idx_meeting_patterns_url ON meeting_patterns(url_pattern);\n    `);\n  }\n\n  insertSession(params: {\n    project: string;\n    startIso: string;\n    endIso: string;\n    type: string;\n    file?: string | null;\n    host?: string | null;\n    url?: string | null;\n  }): void {\n    const { project, startIso, endIso, type, file, host, url } = params;\n    const date = startIso.split(\"T\")[0];\n    const stmt = this.db.prepare(`\n      INSERT INTO sessions (project, date, start, end, type, file, host, url)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n    stmt.run(project, date, startIso, endIso, type, file ?? null, host ?? null, url ?? null);\n  }\n\n  getAllSessions(): SessionRecord[] {\n    const stmt = this.db.prepare(`\n      SELECT id, project, date, start, end, type, file, host, url\n        FROM sessions\n        ORDER BY start DESC\n    `);\n    return stmt.all() as SessionRecord[];\n  }\n\n  getSessionsForProject(project: string): SessionRecord[] {\n    const stmt = this.db.prepare(`\n      SELECT id, project, date, start, end, type, file, host, url\n        FROM sessions\n        WHERE project = ?\n        ORDER BY start DESC\n    `);\n    return stmt.all(project) as SessionRecord[];\n  }\n\n  getSessionsByDateRange(from: string, to: string): SessionRecord[] {\n    const stmt = this.db.prepare(`\n      SELECT id, project, date, start, end, type, file, host, url\n        FROM sessions\n        WHERE start BETWEEN ? AND ?\n        ORDER BY start DESC\n    `);\n    return stmt.all(from, to) as SessionRecord[];\n  }\n\n  queryAllUrls(): UrlMapping[] {\n    const stmt = this.db.prepare(`\n      SELECT id, project, url\n        FROM urls\n        ORDER BY project DESC\n    `);\n    const rows = stmt.all() as Array<{\n      id: number;\n      project: string;\n      url: string | null;\n    }>;\n    return rows.map((row) => ({\n      id: row.id,\n      project: row.project,\n      url: row.url,\n    }));\n  }\n\n  queryProjectByUrl(host: string): string | null {\n    const stmt = this.db.prepare(`\n      SELECT project\n        FROM urls\n       WHERE ? LIKE '%' || url || '%'\n    ORDER BY length(url) DESC\n       LIMIT 1\n    `);\n    const row = stmt.get(host) as { project: string } | undefined;\n    return row?.project ?? null;\n  }\n\n  insertUrl(project: string, url?: string | null): void {\n    const stmt = this.db.prepare(`\n      INSERT INTO urls (project, url)\n      VALUES (?, ?)\n    `);\n    stmt.run(project, url ?? null);\n  }\n\n  updateUrl(id: number, project: string, url: string): void {\n    const stmt = this.db.prepare(`\n      UPDATE urls\n         SET project = ?, url = ?\n       WHERE id = ?\n    `);\n    stmt.run(project, url, id);\n  }\n\n  deleteUrlById(id: number): void {\n    const stmt = this.db.prepare(`\n      DELETE FROM urls\n       WHERE id = ?\n    `);\n    stmt.run(id);\n  }\n\n  removeUrls(project: string): void {\n    const stmt = this.db.prepare(`\n      DELETE FROM urls\n       WHERE project = ?\n    `);\n    stmt.run(project);\n  }\n\n  getAllIgnoredProjects(): IgnoredProject[] {\n    const stmt = this.db.prepare(`\n      SELECT id, project_name, ignored_at\n        FROM ignored_projects\n        ORDER BY ignored_at DESC\n    `);\n    const rows = stmt.all() as Array<{\n      id: number;\n      project_name: string;\n      ignored_at: string;\n    }>;\n    return rows.map((row) => ({\n      id: row.id,\n      projectName: row.project_name,\n      ignoredAt: row.ignored_at,\n    }));\n  }\n\n  insertIgnoredProject(projectName: string): void {\n    const stmt = this.db.prepare(`\n      INSERT OR REPLACE INTO ignored_projects (project_name, ignored_at, updated_at)\n      VALUES (?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)\n    `);\n    stmt.run(projectName);\n  }\n\n  deleteIgnoredProject(id: number): void {\n    const stmt = this.db.prepare(`\n      DELETE FROM ignored_projects\n       WHERE id = ?\n    `);\n    stmt.run(id);\n  }\n\n  getAllProjectNames(): ProjectAlias[] {\n    const stmt = this.db.prepare(`\n      SELECT id, project_name, custom_name\n        FROM project_names\n        ORDER BY project_name\n    `);\n    const rows = stmt.all() as Array<{\n      id: number;\n      project_name: string;\n      custom_name: string;\n    }>;\n    return rows.map((row) => ({\n      id: row.id,\n      projectName: row.project_name,\n      customName: row.custom_name,\n    }));\n  }\n\n  insertProjectName(projectName: string, customName: string): void {\n    const stmt = this.db.prepare(`\n      INSERT INTO project_names (project_name, custom_name)\n      VALUES (?, ?)\n      ON CONFLICT(project_name) DO UPDATE SET\n        custom_name = excluded.custom_name\n    `);\n    stmt.run(projectName, customName);\n  }\n\n  updateProjectName(id: number, customName: string): void {\n    const stmt = this.db.prepare(`\n      UPDATE project_names\n         SET custom_name = ?\n       WHERE id = ?\n    `);\n    stmt.run(customName, id);\n  }\n\n  deleteProjectName(id: number): void {\n    const stmt = this.db.prepare(`\n      DELETE FROM project_names\n       WHERE id = ?\n    `);\n    stmt.run(id);\n  }\n\n  getAllProjectClients(): ProjectClient[] {\n    const stmt = this.db.prepare(`\n      SELECT id, project_name, client_name, updated_at\n        FROM project_clients\n        ORDER BY client_name, project_name\n    `);\n    const rows = stmt.all() as Array<{\n      id: number;\n      project_name: string;\n      client_name: string;\n      updated_at: string;\n    }>;\n    return rows.map((row) => ({\n      id: row.id,\n      projectName: row.project_name,\n      clientName: row.client_name,\n      updatedAt: row.updated_at,\n    }));\n  }\n\n  insertProjectClient(projectName: string, clientName: string): void {\n    const stmt = this.db.prepare(`\n      INSERT INTO project_clients (project_name, client_name, updated_at)\n      VALUES (?, ?, CURRENT_TIMESTAMP)\n      ON CONFLICT(project_name) DO UPDATE SET\n        client_name = excluded.client_name,\n        updated_at = CURRENT_TIMESTAMP\n    `);\n    stmt.run(projectName, clientName);\n  }\n\n  updateProjectClient(id: number, clientName: string): void {\n    const stmt = this.db.prepare(`\n      UPDATE project_clients\n         SET client_name = ?, updated_at = CURRENT_TIMESTAMP\n       WHERE id = ?\n    `);\n    stmt.run(clientName, id);\n  }\n\n  deleteProjectClient(id: number): void {\n    const stmt = this.db.prepare(`\n      DELETE FROM project_clients\n       WHERE id = ?\n    `);\n    stmt.run(id);\n  }\n\n  getAllCommits(): CommitRecord[] {\n    const stmt = this.db.prepare(`\n      SELECT id, project, commit_hash, commit_message, branch,\n             author_name, author_email, commit_time, files_changed,\n             lines_added, lines_deleted, created_at\n        FROM commits\n        ORDER BY commit_time DESC\n    `);\n    const rows = stmt.all() as Array<{\n      id: number;\n      project: string;\n      commit_hash: string;\n      commit_message: string;\n      branch: string | null;\n      author_name: string | null;\n      author_email: string | null;\n      commit_time: string;\n      files_changed: number;\n      lines_added: number;\n      lines_deleted: number;\n      created_at: string;\n    }>;\n    return rows.map((row) => ({\n      id: row.id,\n      project: row.project,\n      commitHash: row.commit_hash,\n      commitMessage: row.commit_message,\n      branch: row.branch ?? \"\",\n      authorName: row.author_name ?? \"\",\n      authorEmail: row.author_email ?? \"\",\n      commitTime: row.commit_time,\n      filesChanged: row.files_changed,\n      linesAdded: row.lines_added,\n      linesDeleted: row.lines_deleted,\n      createdAt: row.created_at,\n    }));\n  }\n\n  getCommitsByDateRange(from: string, to: string): CommitRecord[] {\n    const stmt = this.db.prepare(`\n      SELECT id, project, commit_hash, commit_message, branch,\n             author_name, author_email, commit_time, files_changed,\n             lines_added, lines_deleted, created_at\n        FROM commits\n       WHERE commit_time BETWEEN ? AND ?\n       ORDER BY commit_time DESC\n    `);\n    const rows = stmt.all(from, to) as Array<{\n      id: number;\n      project: string;\n      commit_hash: string;\n      commit_message: string;\n      branch: string | null;\n      author_name: string | null;\n      author_email: string | null;\n      commit_time: string;\n      files_changed: number;\n      lines_added: number;\n      lines_deleted: number;\n      created_at: string;\n    }>;\n    return rows.map((row) => ({\n      id: row.id,\n      project: row.project,\n      commitHash: row.commit_hash,\n      commitMessage: row.commit_message,\n      branch: row.branch ?? \"\",\n      authorName: row.author_name ?? \"\",\n      authorEmail: row.author_email ?? \"\",\n      commitTime: row.commit_time,\n      filesChanged: row.files_changed,\n      linesAdded: row.lines_added,\n      linesDeleted: row.lines_deleted,\n      createdAt: row.created_at,\n    }));\n  }\n\n  insertCommit(params: {\n    project: string;\n    commitHash: string;\n    commitMessage: string;\n    branch?: string | null;\n    authorName?: string | null;\n    authorEmail?: string | null;\n    commitTime: string;\n    filesChanged: number;\n    linesAdded: number;\n    linesDeleted: number;\n  }): void {\n    const stmt = this.db.prepare(`\n      INSERT INTO commits (\n        project, commit_hash, commit_message, branch,\n        author_name, author_email, commit_time,\n        files_changed, lines_added, lines_deleted\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n    stmt.run(\n      params.project,\n      params.commitHash,\n      params.commitMessage,\n      params.branch ?? null,\n      params.authorName ?? null,\n      params.authorEmail ?? null,\n      params.commitTime,\n      params.filesChanged,\n      params.linesAdded,\n      params.linesDeleted,\n    );\n  }\n\n  getAllActiveProjects(): ActiveProject[] {\n    const stmt = this.db.prepare(`\n      SELECT project AS name, MAX(end) AS last_worked_on\n        FROM sessions\n        GROUP BY project\n        ORDER BY last_worked_on DESC\n    `);\n    const rows = stmt.all() as Array<{ name: string }>;\n    return rows.map((row) => ({\n      name: row.name,\n    }));\n  }\n\n  getAllWrikeMappings(): WrikeMapping[] {\n    const stmt = this.db.prepare(`\n      SELECT id, project_name, wrike_project_id, wrike_title, wrike_permalink, created_at\n        FROM wrike_mappings\n        ORDER BY project_name\n    `);\n    const rows = stmt.all() as Array<{\n      id: number;\n      project_name: string;\n      wrike_project_id: string;\n      wrike_title: string;\n      wrike_permalink: string;\n      created_at: string;\n    }>;\n    return rows.map((row) => ({\n      id: row.id,\n      projectName: row.project_name,\n      wrikeProjectId: row.wrike_project_id,\n      wrikeProjectTitle: row.wrike_title,\n      wrikePermalink: row.wrike_permalink,\n      createdAt: row.created_at,\n    }));\n  }\n\n  getWrikeMappingByProject(projectName: string): WrikeMapping | null {\n    const stmt = this.db.prepare(`\n      SELECT id, project_name, wrike_project_id, wrike_title, wrike_permalink, created_at\n        FROM wrike_mappings\n       WHERE project_name = ?\n    `);\n    const row = stmt.get(projectName) as {\n      id: number;\n      project_name: string;\n      wrike_project_id: string;\n      wrike_title: string;\n      wrike_permalink: string;\n      created_at: string;\n    } | undefined;\n    if (!row) {\n      return null;\n    }\n    return {\n      id: row.id,\n      projectName: row.project_name,\n      wrikeProjectId: row.wrike_project_id,\n      wrikeProjectTitle: row.wrike_title,\n      wrikePermalink: row.wrike_permalink,\n      createdAt: row.created_at,\n    };\n  }\n\n  insertOrUpdateWrikeMapping(params: {\n    projectName: string;\n    wrikeProjectId: string;\n    wrikeTitle: string;\n    wrikePermalink: string;\n  }): void {\n    const stmt = this.db.prepare(`\n      INSERT INTO wrike_mappings (project_name, wrike_project_id, wrike_title, wrike_permalink)\n      VALUES (?, ?, ?, ?)\n      ON CONFLICT(project_name) DO UPDATE SET\n        wrike_project_id = excluded.wrike_project_id,\n        wrike_title = excluded.wrike_title,\n        wrike_permalink = excluded.wrike_permalink,\n        updated_at = CURRENT_TIMESTAMP\n    `);\n    stmt.run(\n      params.projectName,\n      params.wrikeProjectId,\n      params.wrikeTitle,\n      params.wrikePermalink,\n    );\n  }\n\n  deleteWrikeMapping(id: number): void {\n    const stmt = this.db.prepare(`\n      DELETE FROM wrike_mappings\n       WHERE id = ?\n    `);\n    stmt.run(id);\n  }\n\n  deleteWrikeMappingByProject(projectName: string): void {\n    const stmt = this.db.prepare(`\n      DELETE FROM wrike_mappings\n       WHERE project_name = ?\n    `);\n    stmt.run(projectName);\n  }\n\n  insertOrUpdateMeetingPattern(params: {\n    projectName: string;\n    urlPattern: string;\n    meetingTitle?: string | null;\n    description?: string | null;\n    autoAssign?: boolean;\n  }): void {\n    const stmt = this.db.prepare(`\n      INSERT INTO meeting_patterns (project_name, url_pattern, meeting_title, description, auto_assign, updated_at)\n      VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)\n      ON CONFLICT(url_pattern) DO UPDATE SET\n        project_name = excluded.project_name,\n        meeting_title = excluded.meeting_title,\n        description = excluded.description,\n        auto_assign = excluded.auto_assign,\n        updated_at = CURRENT_TIMESTAMP\n    `);\n    stmt.run(\n      params.projectName,\n      params.urlPattern,\n      params.meetingTitle ?? null,\n      params.description ?? null,\n      params.autoAssign === false ? 0 : 1,\n    );\n  }\n\n  getAllMeetingPatterns(): MeetingPattern[] {\n    const stmt = this.db.prepare(`\n      SELECT id, project_name, url_pattern, meeting_title, description,\n             auto_assign, last_used, created_at, updated_at\n        FROM meeting_patterns\n        ORDER BY last_used DESC, created_at DESC\n    `);\n    const rows = stmt.all() as Array<{\n      id: number;\n      project_name: string;\n      url_pattern: string;\n      meeting_title: string | null;\n      description: string | null;\n      auto_assign: number;\n      last_used: string;\n      created_at: string;\n      updated_at: string;\n    }>;\n    return rows.map((row) => ({\n      id: row.id,\n      projectName: row.project_name,\n      urlPattern: row.url_pattern,\n      meetingTitle: row.meeting_title,\n      description: row.description,\n      autoAssign: row.auto_assign === 1,\n      lastUsed: row.last_used,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at,\n    }));\n  }\n\n  deleteMeetingPattern(id: number): void {\n    const stmt = this.db.prepare(`\n      DELETE FROM meeting_patterns\n       WHERE id = ?\n    `);\n    stmt.run(id);\n  }\n\n  updateMeetingPatternAutoAssign(id: number, autoAssign: boolean): void {\n    const stmt = this.db.prepare(`\n      UPDATE meeting_patterns\n         SET auto_assign = ?, updated_at = CURRENT_TIMESTAMP\n       WHERE id = ?\n    `);\n    stmt.run(autoAssign ? 1 : 0, id);\n  }\n\n  findMeetingPattern(url: string): string | null {\n    const stmt = this.db.prepare(`\n      SELECT project_name\n        FROM meeting_patterns\n        WHERE auto_assign = 1 AND ? LIKE '%' || url_pattern || '%'\n        ORDER BY length(url_pattern) DESC\n        LIMIT 1\n    `);\n    const row = stmt.get(url) as { project_name: string } | undefined;\n    if (!row?.project_name) {\n      return null;\n    }\n    this.updateMeetingPatternLastUsed(url);\n    return row.project_name as string;\n  }\n\n  private updateMeetingPatternLastUsed(url: string): void {\n    const stmt = this.db.prepare(`\n      UPDATE meeting_patterns\n         SET last_used = CURRENT_TIMESTAMP\n       WHERE ? LIKE '%' || url_pattern || '%'\n    `);\n    stmt.run(url);\n  }\n}\n"]}