{"version":3,"file":"gitTracker.js","sourceRoot":"","sources":["../src/gitTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import * as vscode from \"vscode\";\nimport { execSync } from \"child_process\";\nimport { DatabaseManager } from \"./database\";\nimport { TrackerConfiguration } from \"./config\";\nimport { deriveProjectNameFromPath } from \"./projectNames\";\n\ninterface GitExtensionExports {\n  getAPI(version: number): GitAPI;\n}\n\ninterface GitAPI {\n  repositories: Repository[];\n  onDidOpenRepository: vscode.Event<Repository>;\n  onDidCloseRepository: vscode.Event<Repository>;\n  onDidRunGitCommand?: vscode.Event<GitCommandEvent>;\n}\n\ninterface Repository {\n  rootUri: vscode.Uri;\n}\n\ninterface GitCommandEvent {\n  command: string;\n  args?: string[];\n  exitCode?: number;\n  repository?: Repository;\n}\n\nexport class GitCommitTracker implements vscode.Disposable {\n  private disposables: vscode.Disposable[] = [];\n  private config: TrackerConfiguration;\n\n  constructor(\n    private readonly database: DatabaseManager,\n    config: TrackerConfiguration,\n  ) {\n    this.config = config;\n  }\n\n  activate(): void {\n    const extension = vscode.extensions.getExtension<GitExtensionExports>(\"vscode.git\");\n    if (!extension) {\n      console.warn(\"CodePulse: Git extension not available. Skipping commit tracking.\");\n      return;\n    }\n\n    const loadApi = (extension.isActive\n      ? Promise.resolve(extension.exports)\n      : extension.activate().then(() => extension.exports)) as Promise<GitExtensionExports>;\n\n    loadApi\n      .then((exports) => exports.getAPI(1))\n      .then((api) => this.registerApi(api))\n      .catch((error) => {\n        console.warn(\"CodePulse: unable to initialise Git API\", error);\n      });\n  }\n\n  dispose(): void {\n    for (const disposable of this.disposables) {\n      disposable.dispose();\n    }\n    this.disposables = [];\n  }\n\n  updateConfiguration(config: TrackerConfiguration): void {\n    this.config = config;\n  }\n\n  private registerApi(api: GitAPI): void {\n    if (api.onDidRunGitCommand) {\n      this.disposables.push(\n        api.onDidRunGitCommand((event) => {\n          if (!event.repository || (typeof event.exitCode === \"number\" && event.exitCode !== 0)) {\n            return;\n          }\n          if (event.command.startsWith(\"commit\")) {\n            this.captureCommit(event.repository);\n          }\n        }),\n      );\n    }\n\n    for (const repo of api.repositories) {\n      this.captureCommit(repo);\n    }\n\n    this.disposables.push(api.onDidOpenRepository((repo) => this.captureCommit(repo)));\n  }\n\n  private captureCommit(repo: Repository): void {\n    try {\n      const repoPath = repo.rootUri.fsPath;\n      const projectName = deriveProjectNameFromPath(repoPath, this.config);\n      if (!projectName) {\n        return;\n      }\n\n      const commitHash = execSync(\"git rev-parse HEAD\", {\n        cwd: repoPath,\n        stdio: [\"ignore\", \"pipe\", \"ignore\"],\n      })\n        .toString()\n        .trim();\n\n      if (!commitHash) {\n        return;\n      }\n\n      const pretty = execSync(\n        \"git log -1 --pretty=format:%H%n%s%n%an%n%ae%n%aI\",\n        { cwd: repoPath, stdio: [\"ignore\", \"pipe\", \"ignore\"] },\n      )\n        .toString()\n        .split(\"\\n\");\n\n      const branch = execSync(\"git rev-parse --abbrev-ref HEAD\", {\n        cwd: repoPath,\n        stdio: [\"ignore\", \"pipe\", \"ignore\"],\n      })\n        .toString()\n        .trim();\n\n      const statsOutput = execSync(\"git show --stat --oneline -1\", {\n        cwd: repoPath,\n        stdio: [\"ignore\", \"pipe\", \"ignore\"],\n      })\n        .toString();\n\n      const stats = statsOutput.match(\n        /(\\d+) files? changed(?:, (\\d+) insertions?\\(\\+\\))?(?:, (\\d+) deletions?\\(-\\))?/,\n      );\n\n      const filesChanged = stats ? parseInt(stats[1] ?? \"0\", 10) : 0;\n      const linesAdded = stats ? parseInt(stats[2] ?? \"0\", 10) : 0;\n      const linesDeleted = stats ? parseInt(stats[3] ?? \"0\", 10) : 0;\n\n      this.database.insertCommit({\n        project: projectName,\n        commitHash,\n        commitMessage: pretty[1] ?? \"\",\n        branch,\n        authorName: pretty[2] ?? \"\",\n        authorEmail: pretty[3] ?? \"\",\n        commitTime: pretty[4] ?? new Date().toISOString(),\n        filesChanged,\n        linesAdded,\n        linesDeleted,\n      });\n    } catch (error) {\n      console.warn(\"CodePulse: failed to record commit\", error);\n    }\n  }\n}\n"]}